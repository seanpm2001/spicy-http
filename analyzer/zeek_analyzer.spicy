# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.
#
# Augment standard HTTP grammar with Zeek-specific logic.

module Zeek_HTTP;

import HTTP;
import zeek;

# Create an http_message_state instance. We only set a subset of the fields that we happen to know Zeek needs.
public function create_http_message_stats(msg: HTTP::Message) : tuple<time, bool, bytes, uint64, uint64, uint64> {
    return (cast<time>(0), False, b"", (msg?.body_len ? msg.body_len : 0), 0 , 0);
}

# Create an map of all headers as http_all_headers() expects it. Version for Zeek < 3.2)
public function convert_all_headers_v30(headers: vector<HTTP::Header>) : map<uint64, tuple<bytes, bytes>> {
    local hdrs: map<uint64, tuple<bytes, bytes>>;

    for ( i in headers )
        hdrs[|hdrs|] = (i.name.upper(), i.content);

    return hdrs;
}

# Create an map of all headers as http_all_headers() expects it. Version for Zeek >= 3.2.
public function convert_all_headers_v32(headers: vector<HTTP::Header>) : map<uint64, tuple<bytes, bytes, bytes>> {
    local hdrs: map<uint64, tuple<bytes, bytes, bytes>>;

    for ( i in headers )
        hdrs[|hdrs|] = (i.name, i.name.upper(), i.content);

    return hdrs;
}

on HTTP::RequestLine::%done {
    zeek::confirm_protocol();
    # zeek::rule_match(zeek::PatternType::HTTP_REQUEST, self.uri, True, True, True);
}

on HTTP::Body::%init priority=10 {
    zeek::file_begin();

    if ( msg?.content_length && msg.use_content_length )
        zeek::file_set_size(msg.content_length);

    # rule_match(msg, zeek::PatternType::HTTP_REQUEST_BODY, zeek::PatternType::HTTP_REPLY_BODY, b"", True, False, True);
}

on HTTP::Body::%done priority=15 {
    zeek::file_end();
    # rule_match(msg, zeek::PatternType::HTTP_REQUEST_BODY, zeek::PatternType::HTTP_REPLY_BODY, b"", False, True, False);
}

on HTTP::Body::%error priority=15 {
    zeek::file_end();
    # rule_match(msg, zeek::PatternType::HTTP_REQUEST_BODY, zeek::PatternType::HTTP_REPLY_BODY, b"", False, True, False);
}

on HTTP::Content::data priority=15 {
    zeek::file_data_in(self.data);
    # rule_match(msg, zeek::PatternType::HTTP_REQUEST_BODY, zeek::PatternType::HTTP_REPLY_BODY, self.data, False, False, False);
}
